diff --git a/models/script_util.py b/models/script_util.py
new file mode 100644
index 0000000..c0b27c6
--- /dev/null
+++ b/models/script_util.py
@@ -0,0 +1,84 @@
+import argparse
+import inspect
+
+from . import gaussian_diffusion as gd
+from .respace import SpacedDiffusion, space_timesteps
+
+def create_gaussian_diffusion(
+        *,
+        steps,
+        model_mean_type,
+        loss_type,
+        schedule_name,
+        schedule_kwargs,
+        sf,
+        kappa,
+        etas_end,
+        min_noise_level,
+        normalize_input,
+        latent_flag,
+        **kwargs # Catch any other unused args
+):
+    """
+    Creates the custom Gaussian diffusion process based on the YAML configuration.
+    This version is corrected to pass the right arguments to the right functions.
+    """
+    # Get the eta schedule as defined in the YAML
+    sqrt_etas = gd.get_named_eta_schedule(
+        schedule_name=schedule_name,
+        num_diffusion_timesteps=steps,
+        min_noise_level=min_noise_level,
+        etas_end=etas_end,
+        kappa=kappa,
+        kwargs=schedule_kwargs
+    )
+
+    # Directly create and return the GaussianDiffusion object with its specific arguments
+    diffusion = gd.GaussianDiffusion(
+        sqrt_etas=sqrt_etas,
+        kappa=kappa,
+        model_mean_type=getattr(gd.ModelMeanType, model_mean_type),
+        loss_type=getattr(gd.LossType, loss_type),
+        sf=sf,
+        normalize_input=normalize_input,
+        latent_flag=latent_flag
+    )
+    
+    return diffusion
+
+def create_gaussian_diffusion_ddpm(
+    *,
+    beta_start,
+    beta_end,
+    sf=4,
+    steps=1000,
+    learn_sigma=False,
+    sigma_small=False,
+    noise_schedule="linear",
+    predict_xstart=False,
+    timestep_respacing=None,
+    scale_factor=1.0,
+):
+    betas = gd.get_named_beta_schedule(noise_schedule, steps, beta_start, beta_end)
+    if timestep_respacing is None:
+        timestep_respacing = steps
+    else:
+        assert isinstance(timestep_respacing, int)
+    return SpacedDiffusionDDPM(
+        use_timesteps=space_timesteps(steps, timestep_respacing),
+        betas=betas,
+        model_mean_type=(
+            gd.ModelMeanType.EPSILON if not predict_xstart else gd.ModelMeanType.START_X
+        ),
+        model_var_type=(
+            (
+                gd.ModelVarTypeDDPM.FIXED_LARGE
+                if not sigma_small
+                else gd.ModelVarTypeDDPM.FIXED_SMALL
+            )
+            if not learn_sigma
+            else gd.ModelVarTypeDDPM.LEARNED_RANGE
+        ),
+        scale_factor=scale_factor,
+        sf=sf,
+    )
